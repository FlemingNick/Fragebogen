{"version":3,"sources":["Fragebogen/iPhone.png","Fragebogen/Frage/Frage.jsx","Fragebogen/Fragebogen.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Frage","React","forwardRef","props","ref","weight","useState","Anwendungsentwickler","Admin","ECommerce","Mediengestalter","Buro","Marketing","score","setScore","useImperativeHandle","getMyState","className","question","onChange","event","target","value","type","name","number","Fragebogen","Questions","myRef","useRef","console","log","current","map","element","indexOf","onSubmit","App","src","Phone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,oC,0MC4F5BC,G,YAzFDC,IAAMC,YAAW,SAACC,EAAOC,GAEnC,IAAMC,EACqB,EADrBA,GAEM,EAFNA,EAGS,EAHTA,EAIe,EAJfA,EAKI,EALJA,EAMS,EAR4B,EAWjBC,mBAAS,CAC/BC,qBAAuB,EACvBC,MAAO,EACPC,UAAW,EACXC,gBAAiB,EACjBC,KAAM,EACNC,UAAW,IAjB4B,mBAWpCC,EAXoC,KAW7BC,EAX6B,KAqC3C,OAFAC,8BAAoBX,GAAK,iBAAO,CAACY,WAAY,WAAO,OAAOH,MAAU,CAACA,IAGlE,yBAAKI,UAAU,kBACX,yBAAKA,UAAU,eACX,2BAAId,EAAMe,WAEd,yBAAKD,UAAU,YAAYE,SAtBb,SAACC,GACnBN,EACI,CACIP,qBAAuBF,EAA8Be,EAAMC,OAAOC,MAClEd,MAAOH,EAAee,EAAMC,OAAOC,MACnCb,UAAWJ,EAAmBe,EAAMC,OAAOC,MAC3CZ,gBAAiBL,EAAyBe,EAAMC,OAAOC,MACvDX,KAAMN,EAAce,EAAMC,OAAOC,MACjCV,UAAWP,EAAmBe,EAAMC,OAAOC,UAe3C,yBAAKL,UAAU,UACX,2BAAOM,KAAK,QAASC,KAAMrB,EAAMsB,OAAQH,MAAM,MAC/C,2BAAOC,KAAK,QAASC,KAAMrB,EAAMsB,OAAQH,MAAM,MAC/C,2BAAOC,KAAK,QAASC,KAAMrB,EAAMsB,OAAQH,MAAM,MAC/C,2BAAOC,KAAK,QAASC,KAAMrB,EAAMsB,OAAQH,MAAM,OAC/C,2BAAOC,KAAK,QAASC,KAAMrB,EAAMsB,OAAQH,MAAM,OAC/C,2BAAOC,KAAK,QAASC,KAAMrB,EAAMsB,OAAQH,MAAM,QA+BnD,wBAAIL,UAAU,mBACV,uCACA,oDC7BLS,EApDI,WACf,IAAMC,EAAY,CACd,yCACA,6CACA,8DACA,sCACA,wEACA,2EACA,wDACA,2CACA,mEACA,+EACA,mGACA,4CACA,6HACA,yFACA,qEACA,mDACA,sHAlBiB,EAqBKrB,mBAAS,CAC/BC,qBAAuB,EACvBC,MAAO,EACPC,UAAW,EACXC,gBAAiB,EACjBC,KAAM,EACNC,UAAW,IA3BM,mBAsCfgB,GAtCe,UAsCPC,oBAEd,OACI,yBAAKZ,UAAU,aAAaE,SAPR,SAACC,GACrBU,QAAQC,IAAIH,EAAMI,QAAQhB,gBAQrBW,EAAUM,KAAI,SAAAC,GAAO,OAClB,kBAAC,EAAD,CAAOT,OAAQE,EAAUQ,QAAQD,GAAUhB,SAAUS,EAAUA,EAAUQ,QAAQD,IAAW9B,IAAKwB,OAGrG,4BAAQQ,SAjBK,aAiBmBnB,UAAU,kBAA1C,sB,gBChCGoB,MAdf,WACE,OACE,yBAAKpB,UAAU,OACX,yBAAKA,UAAU,uBACX,yBAAKqB,IAAKC,IAAOtB,UAAU,UAC3B,kBAAC,EAAD,CAAYA,UAAU,kBCEduB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.2ebfc6fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iPhone.ff64b978.png\";","import React, { useState, useImperativeHandle } from 'react'\r\nimport './Frage.modules.css'\r\n\r\nconst Frage = React.forwardRef((props, ref) => {\r\n\r\n    const weight = {\r\n        Anwendungsentwickler : 0,\r\n        Admin: -2,\r\n        ECommerce: 2,\r\n        Mediengestalter: 0,\r\n        Buro: 1,\r\n        Marketing: 3\r\n    };\r\n\r\n    const [score, setScore] = useState({\r\n        Anwendungsentwickler : 0,\r\n        Admin: 0,\r\n        ECommerce: 0,\r\n        Mediengestalter: 0,\r\n        Buro: 0,\r\n        Marketing: 0\r\n    });\r\n\r\n    const onChangeValue = (event) => {\r\n        setScore(\r\n            {\r\n                Anwendungsentwickler : weight.Anwendungsentwickler * event.target.value,\r\n                Admin: weight.Admin * event.target.value,\r\n                ECommerce: weight.ECommerce * event.target.value,\r\n                Mediengestalter: weight.Mediengestalter * event.target.value,\r\n                Buro: weight.Buro * event.target.value,\r\n                Marketing: weight.Marketing * event.target.value\r\n            }\r\n        )\r\n\r\n\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({getMyState: () => {return score}}), [score]);\r\n\r\n    return(\r\n        <div className=\"FrageContainer\">\r\n            <div className=\"FrageHeader\">\r\n                <p>{props.question}</p>\r\n            </div>\r\n            <div className=\"FrageBody\" onChange={onChangeValue}>\r\n                <div className=\"Inputs\">\r\n                    <input type=\"radio\"  name={props.number} value=\"3\"/>\r\n                    <input type=\"radio\"  name={props.number} value=\"2\"/>\r\n                    <input type=\"radio\"  name={props.number} value=\"1\"/>\r\n                    <input type=\"radio\"  name={props.number} value=\"-1\"/>\r\n                    <input type=\"radio\"  name={props.number} value=\"-2\"/>\r\n                    <input type=\"radio\"  name={props.number} value=\"-3\"/>\r\n                </div>\r\n               {/* <div className=\"Inputs\">\r\n                    <label className=\"RadioButton\">\r\n                        <input type=\"radio\"  name={props.number} value=\"3\" checked=\"checked\"/>\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n                    <label className=\"RadioButton\">\r\n                        <input type=\"radio\"  name={props.number} value=\"2\" checked=\"checked\"/>\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n                    <label className=\"RadioButton\">\r\n                        <input type=\"radio\"  name={props.number} value=\"1\" checked=\"checked\"/>\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n                    <label className=\"RadioButton\">\r\n                        <input type=\"radio\"  name={props.number} value=\"-1\" checked=\"checked\"/>\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n                    <label className=\"RadioButton\">\r\n                        <input type=\"radio\"  name={props.number} value=\"-2\" checked=\"checked\"/>\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n                    <label className=\"RadioButton\">\r\n                        <input type=\"radio\"  name={props.number} value=\"-3\" checked=\"checked\"/>\r\n                        <span className=\"checkmark\"></span>\r\n                    </label>\r\n\r\n\r\n                </div>*/}\r\n\r\n                <ul className=\"AntwortSpektrum\">\r\n                    <li>Stimmt!</li>\r\n                    <li>Stimmt nicht!</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Frage","import React, {useState, useRef} from 'react'\r\nimport './Fragebogen.modules.css'\r\nimport Frage from './Frage/Frage';\r\n\r\nconst Fragebogen = () => {\r\n    const Questions = [\r\n        \"Ich arbeite gerne in großen Gruppen\",\r\n        \"Der Umgang mit Kunden bereitet mir Spaß\",\r\n        \"Ich übernehme gerne Verantwortung für mein Team﻿\",\r\n        \"Ich kann gut mit Geld umgehen﻿\",\r\n        \"Ich kann meine Mitmenschen schnell für neue Dinge begeistern﻿\",\r\n        \"Situationen und Abläufe systematisch beobachten und analysieren﻿\",\r\n        \"Ich kann mich gut in die Lage Anderer versetzen﻿\",\r\n        \"Ich stelle gerne neue Produkte vor﻿\",\r\n        \"Ich kann mich schnell in komplexe Sachverhalte einarbeiten﻿\",\r\n        \"In meiner Freizeit bin ich stets bemüht neue Kenntnisse zu erlernen﻿\",\r\n        \"Ich interessiere mich stets für die neusten Trends und kenne mich gut mit Popkultur aus﻿\",\r\n        \"Variablen in Mathe machen mir Angst﻿\",\r\n        \"Wenn mein PC den Geist aufgibt, versuche ich das Probleme selber zu lösen anstatt direkt einen Techniker zu rufen﻿\",\r\n        \"Anstatt Gespräche zu beginnen warte ich, bis jemand anderes das Wort ergreift﻿\",\r\n        \"Ich gehe gerne auf neue Leute zu und ergreife die Initiative﻿\",\r\n        \"Ich bezeichne mich selbst als sehr kreativ﻿\",\r\n        \"Ich habe Freude daran,  technischen Problemen auf den Grund zu gehen, auch wenn es manchmal zeitaufwändig﻿\"\r\n    ];\r\n\r\n    const [score, setScore] = useState({\r\n        Anwendungsentwickler : 0,\r\n        Admin: 0,\r\n        ECommerce: 0,\r\n        Mediengestalter: 0,\r\n        Buro: 0,\r\n        Marketing: 0\r\n    });\r\n\r\n    const handleSubmit = () => {\r\n\r\n    };\r\n\r\n    const onChangeHandler = (event) => {\r\n        console.log(myRef.current.getMyState())\r\n    };\r\n\r\n    const myRef = useRef()\r\n\r\n    return(\r\n        <div className=\"Fragebogen\" onChange={onChangeHandler}>\r\n\r\n            {Questions.map(element => (\r\n                <Frage number={Questions.indexOf(element)} question={Questions[Questions.indexOf(element)]} ref={myRef}/>\r\n            ))}\r\n\r\n            <button onSubmit={handleSubmit} className=\"ErgebnisButton\">Ergebis anzeigen</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Fragebogen","import React from 'react';\nimport './App.css';\nimport Fragebogen from './Fragebogen/Fragebogen'\nimport Phone from './Fragebogen/iPhone.png'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"FragebogenContainer\">\n            <img src={Phone} className=\"Phone\"/>\n            <Fragebogen className=\"Fragebogen\"/>\n\n        </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}